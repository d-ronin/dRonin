#!/usr/bin/env python3

from __future__ import print_function

import argparse
import errno
import code
import struct
import time

# Insert the parent directory into the module import search path.
import os
import sys

sys.path.insert(1, os.path.dirname(sys.path[0]))

from dronin import uavo, telemetry, uavo_collection
from threading import Condition

#-------------------------------------------------------------------------------
USAGE = "%(prog)s"
DESC  = """
  Retrieve the configuration of a flight controller.\
"""

cond = Condition()
pending = []

def completion_cb(obj, id_val):
    with cond:
        pending.remove(id_val)
        cond.notifyAll()

def wait_till_less_than(num):
    with cond:
        while len(pending) > num:
            cond.wait()

#-------------------------------------------------------------------------------
def main():
    import argparse
    parser = argparse.ArgumentParser(description="Dump flight controller settings to UAV file.")
    parser.add_argument("-o", "--only-nondefault",
            action   = "store_true",
            default  = False,
            dest     = "only_nondefault",
            help     = "Only put the non-default settings in the UAV file")

    tStream,args = telemetry.get_telemetry_by_args(service_in_iter=False,
            arg_parser=parser)

    tStream.start_thread()

    settings_objects = tStream.uavo_defs.get_settings_objects()

    tStream.wait_connection()

    remaining = settings_objects[:]

    for s in settings_objects:
        pending.append(s._id)

        tStream.request_object(s, cb=completion_cb)

        wait_till_less_than(5)

    wait_till_less_than(0)

    missing = []
    sobjs = []
    for s in settings_objects:
        val = tStream.last_values.get(s)
        if val is not None:
            sobjs.append(val)
        else:
            missing.append(s._name)

    #for s in missing:
    #    print("No instance of %s" % (s))

    print(tStream.uavo_defs.export_xml(sobjs, only_nondefault=args.only_nondefault))

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()
