#!/usr/bin/env python3

import unittest
import time

import logging
logger = logging.getLogger(__name__)

class SimulationTestCase(unittest.TestCase):
    def setUp(self):
        import signal

        self.expected = self.expected_session_time()
        self.timeout = int(self.expected * 1.5 + 1.5) + 1

        signal.alarm(self.timeout)

        from dronin import telemetry

        if self.should_wipe_first():
            import os

            try:
                os.remove('build/unittest.flash')
            except FileNotFoundError:
                pass

        args = [ "-c", "./build/flightd/flightd -! -S telemetry:stdio -c build/unittest.flash" ]
        t_stream = telemetry.get_telemetry_by_args(service_in_iter=False,
                arguments=args)
        t_stream.start_thread()
        t_stream.wait_connection()

        self.stream_iter = iter(t_stream)
        self.t_stream = t_stream
        self.uavrcvr_class = t_stream.uavo_defs.find_by_name("UAVTalkReceiver")

        self.tick_num = 0

        self.begin_time = time.time()

    def tearDown(self):
        self.t_stream._close()

        import signal

        remaining = signal.alarm(0)
        logger.debug("Elapsed %d vs expected %f\n"%(self.timeout - remaining, self.expected))

    def wait_for_tick(self):
        for o in self.stream_iter:
            if o.name == 'UAVO_HwSimulation':
                if o.FakeTickBlocked != 0:
                    self.tick_num += 1
                    return True

        # This is bad.  Got to end of stream, no tick.
        return False

    def send_control_values(self, values):
        val_tup = tuple(values)

        logger.info("control_values %-03d %s"%(self.tick_num, repr(val_tup[0:5])))

        gi = self.uavrcvr_class._make_to_send(val_tup)

        self.t_stream.send_object(gi)

        self.assertTrue(self.wait_for_tick(), "Failed waiting for tick")

    def expected_session_time(self):
        return 9.0

    def should_wipe_first(self):
        return False

class AAConfTests(SimulationTestCase):
    def should_wipe_first(self):
        return True

    def test_do_config(self):
        from dronin import uavofile

        t_stream = self.t_stream

        with open("python/minimum-sim-config.xml", "rb") as f:
            objs = uavofile.UAVFileImport(uavo_defs=t_stream.uavo_defs,
                    contents=f.read())

        t_stream.save_objects(objs.values(), send_first=True)

class SimpleSimTests(SimulationTestCase):
    def test_fifty_ticks_of_disarm(self):
        t_stream = self.t_stream

        stream_iter = iter(t_stream)

        for i in range(20):
            self.send_control_values((0,5000,5000,5000,1000,0,0,0))

        alarms = t_stream.as_filtered_list('SystemAlarms', blocks=False)

        for a in alarms:
            self.assertEqual(a.ManualControl, a.ENUM_ManualControl['NoRx'],
                    "Expected NoRx when invalid radio")

        for i in range(30):
            self.send_control_values((1000,5000,5000,5000,1000,0,0,0))

        alarms = t_stream.as_filtered_list('SystemAlarms', blocks=False)
        alarms = alarms[int(len(alarms)/2)+1:]

        for a in alarms:
            self.assertEqual(a.ManualControl, a.ENUM_ManualControl['None'],
                    "Expected no manualcontrol alarm when valid radio")

        flightStatus = t_stream.as_filtered_list('FlightStatus', blocks=False)

        for f in flightStatus:
            self.assertEqual(f.Armed, f.ENUM_Armed['Disarmed'],
                    "Expected to stay disarmed")

        systemStats = t_stream.as_filtered_list('SystemStats', blocks=False)

        last_flight_time = systemStats[-1].FlightTime

        # We spent 5 seconds.  We expect a number between 4 and 5.5 seconds.
        self.assertGreaterEqual(last_flight_time, 4000)
        self.assertLessEqual(last_flight_time, 5500)

        # Up to 1.5 seconds of armed switch at zero throttle.
        for i in range(15):
            self.send_control_values((1000,5000,5000,5000,9000,0,0,0))

            flightStatus = t_stream.last_values[t_stream.uavo_defs.find_by_name('FlightStatus')]

            if flightStatus.Armed == flightStatus.ENUM_Armed['Armed']:
                break

        self.assertEqual(flightStatus.Armed, flightStatus.ENUM_Armed['Armed'],
                "Expected to become armed")

        self.assertGreater(i, 9, "Needs to take at least 1 second to arm")

        # PositionActual is only telemetered once per second currently,
        # so the following tests are very coarse.  Python API does not
        # currently know how to deal with metaobjects.

        # Apply positive throttle until we reach 10m altitude
        for i in range(70):
            self.send_control_values((6500,5000,5000,5000,9000,0,0,0))

            positionActual = t_stream.last_values[t_stream.uavo_defs.find_by_name('PositionActual')]

            if positionActual.Down > 2:
                break
            if positionActual.Down <= -10:
                break

        self.assertLessEqual(positionActual.Down, -10, "Needed to climb to 10m")
        self.assertTrue(40 < i < 60) # Was 49.

        # Send invalid values and make sure we failsafe / fall
        for i in range(60):
            self.send_control_values((6500,15000,5000,5000,1000,0,0,0))

            positionActual = t_stream.last_values[t_stream.uavo_defs.find_by_name('PositionActual')]

            if positionActual.Down > -1:
                break

        self.assertGreaterEqual(positionActual.Down, -1, "Should fall in failsafe")
        self.assertTrue(10 < i < 40) # Was 29.

    def expected_session_time(self):
        return 37

if __name__ == "__main__":
    import faulthandler
    import signal

    try:
        faulthandler.enable()
        faulthandler.register(signal.SIGALRM, chain=True)
    except Exception:
        pass

    unittest.main()
