/*
    ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
 * @defgroup NOR_FLASH Abstract NOR Flash Class
 * @brief   Generic NOR Flash interface.
 * @details This module implements a generic class for NOR Flash devices.
 *
 * @section flash_1 Driver State Machine
 * The flash driver implements a state machine internally, not all the driver
 * functionalities can be used in any moment, any transition not explicitly
 * shown in the following diagram has to be considered an error and shall
 * be captured by an assertion (if enabled).
 * @dot
  digraph example {
    rankdir="LR";
    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="true", width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];
    stop  [label="FLS_STOP\nLow Power"];
    uninit [label="FLS_UNINIT", style="bold"];
    ready [label="FLS_READY\nClock Enabled"];
    read [label="FLS_READ\nReading"];
    program [label="FLS_PGM\nProgramming"];
    erasea [label="FLS_ERASEA\nErasing All"];
    erases [label="FLS_ERASES\nErasing Sector"];
    uninit -> stop [label=" flashInit()", constraint=false];
    stop -> stop [label=" flashStop()"];
    stop -> ready [label=" flashStart()"];
    ready -> stop [label=" flashStop()"];
    ready -> read [label=" flashRead()\nflashVerifyErase()"];
    read -> ready [label=" return"];
    ready -> program [label=" flashProgram()"];
    program -> ready [label=" return"];
    ready -> erasea [label=" flashEraseAll)"];
    erasea -> ready [label=" flashQueryErase()\nFLASH_NO_ERROR\nFLASH_ERROR_*"];
    erasea -> erasea [label=" flashQueryErase()\nflashProgram()\nflashRead()\nFLASH_BUSY_ERASE"];
    ready -> erases [label=" flashEraseSector()"];
    erases -> ready [label=" flashQueryErase()\nFLASH_NO_ERROR\nFLASH_ERROR_*"];
    erases -> erases [label=" flashQueryErase()\nflashProgram()\nflashRead()\nFLASH_BUSY_ERASE"];
  }
 * @enddot
 *
 * @section flash_2 Flash Operations.
 * This driver abstracts a generic PWM timer composed of:
 * - A clock prescaler.
 * - A main up counter.
 * - A comparator register that resets the main counter to zero when the limit
 *   is reached. An optional callback can be generated when this happens.
 * - An array of @p PWM_CHANNELS PWM channels, each channel has an output,
 *   a comparator and is able to invoke an optional callback when a comparator
 *   match with the main counter happens.
 * .
 * A PWM channel output can be in two different states:
 * - <b>IDLE</b>, when the channel is disabled or after a match occurred.
 * - <b>ACTIVE</b>, when the channel is enabled and a match didn't occur yet
 *   in the current PWM cycle.
 * .
 * Note that the two states can be associated to both logical zero or one in
 * the @p PWMChannelConfig structure.
 *
 * @ingroup HAL_INTERFACES
 */
